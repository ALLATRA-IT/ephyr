worker_processes    auto;

events {
  use    epoll;
}

http {
  log_format    main  '$remote_addr $remote_user [$time_local] "$request" '
                      '$status "$http_referer" "$http_user_agent"';

  access_log    /dev/stdout  main;
  error_log     stderr debug;

  default_type    application/octet-stream;
  include         /usr/local/nginx/conf/mime.types;

  sendfile       on;
  tcp_nopush     on;
  tcp_nodelay    on;

  server {
    listen         80;
    server_name    localhost;
    root           /opt/static;

    # vod settings
    vod_mode                         mapped;
    vod_upstream_location            /vod-meta;
    vod_remote_upstream_location     /vod;
    vod_last_modified_types          *;
    vod_max_mapping_response_size    64m;

    # vod caches
    vod_metadata_cache    metadata_cache    512m;
    vod_response_cache    response_cache    128m;
    vod_mapping_cache     mapping_cache     5m;

    # gzip manifests
    gzip          on;
    gzip_types    application/vnd.apple.mpegurl
                  application/dash+xml
                  text/xml
                  video/f4m;

    # file handle caching / aio
    aio                         on;
    open_file_cache             max=1000 inactive=5m;
    open_file_cache_valid       2m;
    open_file_cache_min_uses    1;
    open_file_cache_errors      on;

    location ^~ /vod-meta/ {
      internal;
      set           $vod_meta vod-meta:8080;
      proxy_pass    http://$vod_meta$request_uri;
      resolver      127.0.0.11 valid=30s;
    }

    location ^~ /vod/ {
      # The second location is required, because `vod_remote_upstream_location`
      # is working only with `proxy_pass`, and serving static directly won't
      # work. See for details:
      # https://github.com/kaltura/nginx-vod-module/issues/261#issuecomment-202430721
      location ^~ /vod/cached/ {
        rewrite    ^/vod/cached/(.*) /$1    break;
        root       /opt/static/videos/;
      }
      location ^~ /vod/local/ {
        rewrite       ^/vod/local/(.*) /$1    break;
        proxy_pass    http://127.0.0.1/vod/cached$uri;
      }

      location ^~ /vod/api.allatra.video/ {
        rewrite                  ^/vod/api.allatra.video/(.*) /$1    break;
        proxy_pass               https://api.allatra.video/storage/videos$uri;
        proxy_ssl_server_name    on;
        resolver                 1.1.1.1 8.8.8.8 8.8.4.4    valid=30s;
      }
    }

    location /hls/ {
      vod    hls;

      add_header    Access-Control-Allow-Headers  '*';
      add_header    Access-Control-Expose-Headers 'Server,range,Content-Length,Content-Range';
      add_header    Access-Control-Allow-Methods  'GET, HEAD, OPTIONS';
      add_header    Access-Control-Allow-Origin   '*';
    }

    location /dash/ {
      vod    dash;

      add_header    Access-Control-Allow-Headers '*';
      add_header    Access-Control-Expose-Headers 'Server,range,Content-Length,Content-Range';
      add_header    Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
      add_header    Access-Control-Allow-Origin '*';
    }
  }
}
